8/19/25
#TODO
when the server starts I want it to load a config file. the config contains existing repositories

it should not just create a default directory. The client needs to choose which repository to connect to or create a new one.

The server needs to receive commands on a seperate channel for a connected client. preferably it needs to move the connection to a different thread
so that its able to accept another connection

8/20/25
Server and client launch seperate threads for file streaming on a seperate tcp connection
you can connect to a repository on the server and stream files to it
#TODO
fix the server so the file streaming channel is only available to the connected client not anybody
store the handles created by the file streaming threads so we can shut them down properly without crashing

fix the ui so that the new repository and disconnect buttons are only visible when connected to the server
make it so that the backup options are only available when connected to a repository
add a button to enable/disable live file streaming
fix the repository selection so that you cant lauch multiple client side streaming threads

8/21/25
Broke up the server and client streaming logic so that the streaming services exist in their own seperate data structures to improve code modularity
implemented proper response send/read formatting for the file streaming server and file streaming client

8/24/25
ui workflow is fixed and displays connections statuses for the main command channel and file streaming channels.
auto-connect is now an implemented features
each repository has its own config with seperate watch directories and options configurable
no longer need to manually save the config
fixed initiallization workflow bugs

next we need to start adding info available about a connected repository, 
such as maybe the size of the folder or the number of files stored in the folder, its also necessary to display a tree of subdirs within the repository
also need to make sure users cant create a new repository with a blank name
add remove repository features also
when a tcp stream cuts we need to update the connection statuses
when a file is uploaded we need to create the relative path on the repo even if its nested in n folders

8/28/25
restructured the code for the desktop app and client request handler from the app.
implemented feature to delete repositories from the system
implemented repo subdirectory tracking.
removed "enable recursive backup" feature, why the fuck would you not enable it

add feature to upload gifs
add feature to upload generic files
add features to track file modifications when they get saved
add connection auth - both client and server exchange challenges. the server proves it has the right key, the client proves it has its own private key.

To make the file explorer, we can have the server maintain a list of the file names and subdirectories formatted in json, We can track the progess of the tree
by incrementing a counter whenever the tree is modified to add a new entry or edit an entry. Then the counter starts at 0 and is n after the nth change to the tree.
each client obtains a copy of the file tree for some repoitory, and when the file tree is requested upon opening the file explorer.
The client requests the tree by sending its version number c_n, The server checks if c_n < n, if it is then the server sends back the updated copy of the tree,
and the client sets its version number to c_n = n. If the client already had the most recent version then we need to aknowledge that the client has the most recent version.
We can save each modification so that we don't have to send the entire tree each time, we just send the changes and the client will apply those.
